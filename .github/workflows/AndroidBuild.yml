name: AndroidBuild

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures we get full history

      - name: Restore last PR ID from cache
        id: restore-cache
        uses: actions/cache@v3
        with:
          path: last_pr_id.txt
          key: last-pr-id
          restore-keys: last-pr-id-

      - name: Get last processed PR ID
        id: get_last_pr
        run: |
          if [ -f last_pr_id.txt ]; then
            LAST_PR_ID=$(cat last_pr_id.txt)
          else
            LAST_PR_ID=0  # Default to 0 if no previous PR is found
          fi
          echo "LAST_PR_ID=$LAST_PR_ID" >> $GITHUB_ENV

      - name: Get all merged PRs since last recorded PR
        id: get_prs
        run: |
          # Get all merged PRs sorted by date
          PRS=$(git log --merges --pretty=format:"%H %s" | grep -oE 'Merge pull request #[0-9]+' | awk '{print $4}')
          
          NEWEST_PR=0
          MERGED_PRS=""
          
          for PR in $PRS; do
            if [ "$PR" -gt "$LAST_PR_ID" ]; then
              MERGED_PRS+="PR #$PR: $(git log --merges --grep="Merge pull request #$PR" --pretty=format:"%s" | sed 's/Merge pull request #[0-9]* from .* //')"$'\n'
              NEWEST_PR=$PR
            fi
          done
          
          echo -e "Merged PRs since last run:\n$MERGED_PRS"
          
          # Save merged PRs as an environment variable for later use
          echo "MERGED_PRS<<EOF" >> $GITHUB_ENV
          echo "$MERGED_PRS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Save the latest PR ID
          if [ "$NEWEST_PR" -ne 0 ]; then
            echo "$NEWEST_PR" > last_pr_id.txt
            echo "LATEST_PR_ID=$NEWEST_PR" >> $GITHUB_ENV
          fi

      - name: Save updated PR ID cache
        uses: actions/cache@v3
        with:
          path: last_pr_id_cache.txt
          key: last-pr-id
          restore-keys: last-pr-id-

      - name: Save latest PR ID to cache
        if: env.LATEST_PR_ID != ''
        run: |
          echo "Saving latest PR ID: $LATEST_PR_ID"
          echo "$LATEST_PR_ID" > last_pr_id.txt

      - name: Print PR Titles
        run: echo "$MERGED_PRS"

      - name: Get PR Titles Merged into Main
        id: pr_titles
        run: |
          PR_TITLES=$(gh pr list --state merged --base main --json title --jq '.[].title' | tr '\n' '; ')
          echo "PR_TITLES=$PR_TITLES" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Commit Messages (Including Merges)
        id: commit_messages
        run: |
          COMMIT_MSGS=$(git log --merges -n 10 --pretty=format:'%s' | tr '\n' '; ')
          echo "COMMIT_MSGS=$COMMIT_MSGS" >> $GITHUB_ENV

      - name: Combine Release Notes
        id: release_notes
        run: |
          RELEASE_NOTES="ðŸ”¹ PR Titles: $PR_TITLES\nðŸ”¹ Commit Messages: $COMMIT_MSGS"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo -e "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV      

      # Step 2: Set up Google services JSON
      - name: Set up Google services JSON
        run: echo "$SERVICE_JSON" > $GITHUB_WORKSPACE/app/google-services.json
        env:
          SERVICE_JSON: ${{ secrets.SERVICE_JSON }}

      # Step 3: Debug Google services JSON
      - name: Debug Google services JSON
        run: cat $GITHUB_WORKSPACE/app/google-services.json

     # Step 5: Cache Gradle Build Cache


      # Step 4: Set execute permission for gradlew
      - name: Set execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle build cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-build-cache-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-



      # Step 5: Set up Java JDK
      - name: Setup Java JDK
        uses: actions/setup-java@v4.5.0
        with:
          distribution: 'temurin' # You can also use 'zulu', 'adopt', etc.
          java-version: '17'

      # Step 6: Decrypt and set up the release keystore
      - name: Decrypt release keystore
        run: |
          mkdir -p $HOME/.android
          echo "${{ secrets.MY_RELEASE_BASE_64 }}" | base64 --decode > $HOME/.android/release.keystore
          

      # Step 7: Build the release APK
      - name: Build Release APK
        env:
          MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
        run: |
          ./gradlew assembleRelease -Pandroid.injected.signing.store.file=$HOME/.android/release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.RELEASE_KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.RELEASE_KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.RELEASE_KEY_PASSWORD }} \
            -PMAPS_API_KEY=$MAPS_API_KEY

      # Step 8: Upload the release APK as a build artifact
      - name: Upload Release APK
        uses: actions/upload-artifact@v4.4.3
        with:
          name: splitsnap-Release.apk
          path: app/build/outputs/apk/release/app-release.apk

      - name: Save latest PR ID to cache
        if: env.LATEST_PR_ID != ''
        uses: actions/cache@v3
        with:
          path: last_pr_id.txt
          key: last-pr-id-${{ env.LATEST_PR_ID }}
          restore-keys: last-pr-id-

      - name: Save Gradle Cache
        if: always()
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}


      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: 1:460580943651:android:9fb395e05801bc120cbe96
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_AUTH_KEY }}
          groups: testers
          file: app/build/outputs/apk/release/app-release.apk
          releaseNotes: |
            releaseNotes: ${{ env.RELEASE_NOTES }}
